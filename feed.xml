<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daniel Wyatt</title>
    <description>DevOps Professional, Cloud Engineer, Embedded Enthusiast.
</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 28 Sep 2016 02:30:13 -0400</pubDate>
    <lastBuildDate>Wed, 28 Sep 2016 02:30:13 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>JuJu 2 with MAAS on Ubuntu Xenial 16.04</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This is a quick guide to using JuJu on top of MAAS on Ubuntu Xenial.
We will use a single physical host with a few KVM virtual machines that will serve as MAAS nodes.&lt;/p&gt;

&lt;h1 id=&quot;maas&quot;&gt;MAAS&lt;/h1&gt;

&lt;p&gt;First we’ll get MAAS setup and working with a few virtual machines.&lt;/p&gt;

&lt;h2 id=&quot;set-up-the-host&quot;&gt;Set Up the Host&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Install Ubuntu 16.04 (I used Desktop)&lt;/li&gt;
  &lt;li&gt;Install Packages: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install -y qemu-system virt-manager openssh-server&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Start services; &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo systemctl enable libvirt-bin &amp;amp;&amp;amp; sudo systemctl start libvirt-bin&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Adjust permissions &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo usermod -a -G libvirtd &amp;lt;YOUR_USERNAME&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Log out and log back in so the permissions take effect. (or use newgrp, or sudo as needed)&lt;/li&gt;
  &lt;li&gt;Ensure the Ubuntu Server ISO is available at /var/lib/libvirt/images/.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We need qemu-system and virt-manager to set up the virtual machines. We will use openssh-server to allow SSH access from the maas-master VM for controlling some of the VMs.&lt;/p&gt;

&lt;h2 id=&quot;set-up-the-vm-environment&quot;&gt;Set Up the VM Environment&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Run virt-manager.&lt;/li&gt;
  &lt;li&gt;Right-click on the QEMU/KVM line and select “Details”.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On the Virtual Networks tab, click the button to create a new virtual network as shown here:&lt;/p&gt;

    &lt;p&gt;&lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/27t.png&quot; data-jslghtbx=&quot;/assets/images/27.png&quot; data-jslghtbx-group=&quot;maas_create_network&quot; /&gt;
    &lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/28t.png&quot; data-jslghtbx=&quot;/assets/images/28.png&quot; data-jslghtbx-group=&quot;maas_create_network&quot; /&gt;
    &lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/29t.png&quot; data-jslghtbx=&quot;/assets/images/29.png&quot; data-jslghtbx-group=&quot;maas_create_network&quot; /&gt;
    &lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/30t.png&quot; data-jslghtbx=&quot;/assets/images/30.png&quot; data-jslghtbx-group=&quot;maas_create_network&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;install-the-maas-region--rack-controller&quot;&gt;Install the MAAS Region &amp;amp; Rack Controller&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create a new VM to install the MAAS Region Controller.&lt;/p&gt;

    &lt;p&gt;&lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/31t.png&quot; data-jslghtbx=&quot;/assets/images/31.png&quot; data-jslghtbx-group=&quot;maas_create_region_controller&quot; /&gt;
    &lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/32t.png&quot; data-jslghtbx=&quot;/assets/images/32.png&quot; data-jslghtbx-group=&quot;maas_create_region_controller&quot; /&gt;
    &lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/33t.png&quot; data-jslghtbx=&quot;/assets/images/33.png&quot; data-jslghtbx-group=&quot;maas_create_region_controller&quot; /&gt;
    &lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/34t.png&quot; data-jslghtbx=&quot;/assets/images/34.png&quot; data-jslghtbx-group=&quot;maas_create_region_controller&quot; /&gt;
    &lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/35t.png&quot; data-jslghtbx=&quot;/assets/images/35.png&quot; data-jslghtbx-group=&quot;maas_create_region_controller&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install the MAAS Region Controller. Most steps are omitted here as the defaults are acceptable or common sense.&lt;/p&gt;

    &lt;p&gt;&lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/36t.png&quot; data-jslghtbx=&quot;/assets/images/36.png&quot; data-jslghtbx-group=&quot;maas_install_region_controller&quot; /&gt;
    &lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/37t.png&quot; data-jslghtbx=&quot;/assets/images/37.png&quot; data-jslghtbx-group=&quot;maas_install_region_controller&quot; /&gt;
    &lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/38t.png&quot; data-jslghtbx=&quot;/assets/images/38.png&quot; data-jslghtbx-group=&quot;maas_install_region_controller&quot; /&gt;
    &lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/39t.png&quot; data-jslghtbx=&quot;/assets/images/39.png&quot; data-jslghtbx-group=&quot;maas_install_region_controller&quot; /&gt;
    &lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/40t.png&quot; data-jslghtbx=&quot;/assets/images/40.png&quot; data-jslghtbx-group=&quot;maas_install_region_controller&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With the installation complete, you can verify that the basics are working by doing the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SSH to the machine (192.168.100.2) using the credentials you created during install.&lt;/li&gt;
  &lt;li&gt;Access the web interface at http://192.168.100.2:5240/ using the other set of credentials you created during install.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Verify this all works before continuing.&lt;/p&gt;

&lt;p&gt;Optionally, you may want to enable auto-starting for this VM:
&lt;code class=&quot;highlighter-rouge&quot;&gt;virsh autostart maas-master&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;set-up-dhcp&quot;&gt;Set Up DHCP&lt;/h2&gt;

&lt;p&gt;Now we want the MAAS controller to run DHCP on the VM network we created.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Log in to the web interface at http://192.168.100.2:5240/.&lt;/li&gt;
  &lt;li&gt;Navigate to the Networks tab at the top.&lt;/li&gt;
  &lt;li&gt;Click on the ‘untagged’ link under the VLAN column.&lt;/li&gt;
  &lt;li&gt;Click the dropdown item at the top that says ‘Take Action’, and select ‘Provide DHCP’.&lt;/li&gt;
  &lt;li&gt;You can accept the defaults and just continue with the “Provide DHCP” button.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For verification, you can SSH to maas-master (192.168.100.2) and confirm that dhcpd is running (pgrep dhcpd should return a number).&lt;/p&gt;

&lt;h2 id=&quot;setup-libvirt-access-on-maas-controller&quot;&gt;Setup libvirt Access on MAAS Controller&lt;/h2&gt;

&lt;p&gt;We want the MAAS controller/master to be able to start and stop VMs on the host. To accomplish this, we will need to install a package and setup public key auth from the MAAS Region Controller to the VM host it runs on.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;SSH to maas-master (192.168.100.2).&lt;/li&gt;
  &lt;li&gt;Install required libvirt client software: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install libvirt-bin&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Become the ‘maas’ user: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo su -ls /bin/bash maas&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Create a key pair: &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen -f /var/lib/maas/.ssh/id_rsa -qN ''&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Copy the public key to the host system: &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-copy-id &amp;lt;USERNAME_ON_HOST&amp;gt;==&lt;/code&gt;192.168.100.1@
# Verify that things are working: @virsh -c qemu+ssh://&amp;lt;USERNAME_ON_HOST&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;==192.168.100.1/system list&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;set-up-maas-nodes&quot;&gt;Set Up MAAS Nodes&lt;/h2&gt;

&lt;p&gt;Now we want to set up 4 VMs that will take on the role of MAAS nodes. Let’s look at setting up the first one.&lt;/p&gt;

&lt;p&gt;Note here that we’re selecting the option to customize the VM before installation. Then we are adding a second disk, and a second network interface before continuing with the installation (which is just network booting in this case).&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/41t.png&quot; data-jslghtbx=&quot;/assets/images/41.png&quot; data-jslghtbx-group=&quot;maas_create_node_vm&quot; /&gt;
        &lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/42t.png&quot; data-jslghtbx=&quot;/assets/images/42.png&quot; data-jslghtbx-group=&quot;maas_create_node_vm&quot; /&gt;
        &lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/43t.png&quot; data-jslghtbx=&quot;/assets/images/43.png&quot; data-jslghtbx-group=&quot;maas_create_node_vm&quot; /&gt;
        &lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/44t.png&quot; data-jslghtbx=&quot;/assets/images/44.png&quot; data-jslghtbx-group=&quot;maas_create_node_vm&quot; /&gt;
        &lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/45t.png&quot; data-jslghtbx=&quot;/assets/images/45.png&quot; data-jslghtbx-group=&quot;maas_create_node_vm&quot; /&gt;
        &lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/46t.png&quot; data-jslghtbx=&quot;/assets/images/46.png&quot; data-jslghtbx-group=&quot;maas_create_node_vm&quot; /&gt;
        &lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/47t.png&quot; data-jslghtbx=&quot;/assets/images/47.png&quot; data-jslghtbx-group=&quot;maas_create_node_vm&quot; /&gt;
        &lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/48t.png&quot; data-jslghtbx=&quot;/assets/images/48.png&quot; data-jslghtbx-group=&quot;maas_create_node_vm&quot; /&gt;
        &lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/49t.png&quot; data-jslghtbx=&quot;/assets/images/49.png&quot; data-jslghtbx-group=&quot;maas_create_node_vm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If everything goes as planned the machine should power on and network boot as shown in the last step above.
It will boot up and run some cloud-init routines and then reboot.&lt;/p&gt;

&lt;p&gt;After rebooting it will probably be stuck complaining about no boot devices being found. This is because the boot options are ‘helpfully’ changed after the reboot. (To be fair, normally this is what you want!)&lt;/p&gt;

&lt;p&gt;To fix things back up, force the VM off and modify the boot options:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/50t.png&quot; data-jslghtbx=&quot;/assets/images/50.png&quot; data-jslghtbx-group=&quot;maas_modify_boot_options&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s check back in to the web interface of the region/rack controller. You’ll find a new node under the Nodes section. It will have a random name, which you may want to change as I did here:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/51t.png&quot; data-jslghtbx=&quot;/assets/images/51.png&quot; data-jslghtbx-group=&quot;maas_node_add&quot; /&gt;
        &lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/52t.png&quot; data-jslghtbx=&quot;/assets/images/52.png&quot; data-jslghtbx-group=&quot;maas_node_add&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On this same page, we will want to scroll down and set up the power control for this node:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/53t.png&quot; data-jslghtbx=&quot;/assets/images/53.png&quot; data-jslghtbx-group=&quot;maas_node_power&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The “Power address” I used here was &lt;code class=&quot;highlighter-rouge&quot;&gt;qemu+ssh://&amp;lt;USERNAME_ON_HOST&amp;gt;==&lt;/code&gt;==192.168.100.1/system list@.&lt;/p&gt;

&lt;p&gt;Finally, we will want to ‘commission’ the node. This will power the VM up, network boot it, and gather information about the node (CPU core count, RAM, etc). It will then power down the node.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/54t.png&quot; data-jslghtbx=&quot;/assets/images/54.png&quot; data-jslghtbx-group=&quot;maas_commission_nodes&quot; /&gt;
        &lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/55t.png&quot; data-jslghtbx=&quot;/assets/images/55.png&quot; data-jslghtbx-group=&quot;maas_commission_nodes&quot; /&gt;
        &lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/56t.png&quot; data-jslghtbx=&quot;/assets/images/56.png&quot; data-jslghtbx-group=&quot;maas_commission_nodes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Check the web interface for the node and you should see the CPU core count, RAM, storage, and other values all filled in.&lt;/p&gt;

&lt;p&gt;Now repeat this section until you have 4 nodes ready to as shown in the previous image. Alternatively you can automate most of this with something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;virsh dumpxml maas-node1 &amp;gt; node.xml
id=$(virsh domuuid maas-node1)
for node in 2 3 4 5; do
    sed &quot;s/maas-node1/maas-node$node/g&quot; node.xml &amp;gt; node$node.xml
    sed -i &quot;s/$id/$(uuidgen)/g&quot; node$node.xml
    qemu-img create -f qcow2 /var/lib/libvirt/images/maas-node$node-1.qcow2 15G
    qemu-img create -f qcow2 /var/lib/libvirt/images/maas-node$node-2.qcow2 15G
    virsh define node$node.xml
done
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You’ll still need to virsh edit maas-node{2,3,4,5} and ensure MAC addresses are unique.&lt;/p&gt;

&lt;h1 id=&quot;juju&quot;&gt;JuJu&lt;/h1&gt;

&lt;p&gt;Now we’ll get JuJu 2 set up on the host machine and deployed into MAAS.&lt;/p&gt;

&lt;h2 id=&quot;install-packages&quot;&gt;Install Packages&lt;/h2&gt;

&lt;p&gt;We only need a single package here:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install -y juju-2.0&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;jujumaas&quot;&gt;JuJu+MAAS&lt;/h2&gt;

&lt;p&gt;We’ll need to create a file to describe our MAAS cloud:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;maascloud.yaml&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;clouds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;maascloud&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;maas&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;auth-types&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;oauth1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;endpoint&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http://192.168.100.2:5240/MAAS'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we can inform JuJu about this cloud: &lt;code class=&quot;highlighter-rouge&quot;&gt;juju add-cloud maascloud ~/maascloud.yaml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can verify that it has been added with: &lt;code class=&quot;highlighter-rouge&quot;&gt;juju list-clouds&lt;/code&gt; (look for local:maascloud)&lt;/p&gt;

&lt;p&gt;Now we’ll need to add credentials for MAAS.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Navigate to http://192.168.100.2:5240/MAAS/account/prefs/ and grab the API key from the top of the page.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;juju add-credential maascloud&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Enter some name for the credential.&lt;/li&gt;
  &lt;li&gt;Paste the API key from step 1.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can run &lt;code class=&quot;highlighter-rouge&quot;&gt;juju list-credentials&lt;/code&gt; to verify the credentials were added.&lt;/p&gt;

&lt;p&gt;Finally we are ready to bootstrap JuJu in our MAAS cloud.
&lt;code class=&quot;highlighter-rouge&quot;&gt;juju bootstrap maascloud-controller maascloud&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;At this point JuJu should be up and running! You can now deploy applications and bundles on to the VMs (also in LXD containers on the VMs).&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Sep 2016 02:04:56 -0400</pubDate>
        <link>/2016/09/20/juju-2-with-maas-on-ubuntu-xenial-16.04/</link>
        <guid isPermaLink="true">/2016/09/20/juju-2-with-maas-on-ubuntu-xenial-16.04/</guid>
        
        
      </item>
    
      <item>
        <title>CoreOS local cluster in QEMU on Arch Linux</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;CoreOS is a lightweight Linux-based OS for clustered deployments of containers. It can stand on its own but also works well with higher-level tools like Kubernetes.&lt;/p&gt;

&lt;p&gt;Here I will walk through a process for running a small cluster of CoreOS VMs that will be booted over the network from another Arch Linux system. This should mostly be suitable for testing/dev.&lt;/p&gt;

&lt;p&gt;The server named archpxe will provide TFTP. The server named archvmhost will provide HTTP (via nginx) and run the virtual machines. You could probably combine these roles on to a single server but that is not covered here.&lt;/p&gt;

&lt;p&gt;I have tested this with QEMU version 2.6.0.&lt;/p&gt;

&lt;h2 id=&quot;set-up-the-network-boot-server&quot;&gt;Set up the Network Boot Server&lt;/h2&gt;

&lt;p&gt;First, go configure your DHCP server to hand out the appropriate next-server IP and filename. If you’re using pfSense, for example, you may find settings called “Next Server” (example: 192.168.5.243) and “Default BIOS file name” (pxelinux.0) under the Services-&amp;gt;DHCP Server web interface page.&lt;/p&gt;

&lt;p&gt;Now we will need a TFTP server.&lt;/p&gt;

&lt;h3 id=&quot;set-up-tftp&quot;&gt;Set up TFTP&lt;/h3&gt;

&lt;p&gt;Here, we will:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install the tftp-hpa package to provide the TFTP server.&lt;/li&gt;
  &lt;li&gt;Install the syslinux package to provide pxelinux.0 and dependencies as the initial boot target.&lt;/li&gt;
  &lt;li&gt;Download the CoreOS PXE image.&lt;/li&gt;
  &lt;li&gt;Create the pxelinux configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pacman -S tftp-hpa
systemctl enable tftpd
systemctl start tftpd

pacman -S syslinux
cp /usr/lib/syslinux/bios/pxelinux.0 /srv/tftp/
cp /usr/lib/syslinux/bios/ldlinux.c32 /srv/tftp/

pacman -S wget
cd /srv/tftp
wget https://stable.release.core-os.net/amd64-usr/current/coreos\_production\_pxe.vmlinuz
wget https://stable.release.core-os.net/amd64-usr/current/coreos\_production\_pxe\_image.cpio.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;configure-pxelinux&quot;&gt;Configure PXELINUX&lt;/h3&gt;

&lt;p&gt;Now we can create the pxelinux configuration. Note that we are passing the cloud-config-url kernel parameter.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir /srv/tftp/pxelinux.cfg
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# /srv/tftp/pxelinux.cfg/default
default coreos
prompt 1
timeout 15
display boot.msg

label coreos
  menu default
  kernel coreos_production_pxe.vmlinuz
  append initrd=coreos_production_pxe_image.cpio.gz cloud-config-url=http://archvmhost/coreos-cloud-config.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;set-up-the-virtual-machine-host&quot;&gt;Set up the Virtual Machine Host&lt;/h2&gt;

&lt;h3 id=&quot;set-up-nginx&quot;&gt;Set up nginx&lt;/h3&gt;

&lt;p&gt;Now let’s install nginx on the archvmhost server to serve up the coreos-cloud-config.yaml file. The reason we are doing this is so that nginx can replace the $public_ipv4 placeholder in the coreos-cloud-config.yaml file with the remote client’s IP address when it requests it over HTTP.&lt;/p&gt;

&lt;p&gt;First, install nginx:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pacman -S nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we can create our nginx config, overwriting what is already there.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# /etc/nginx/nginx.conf
worker_processes  1;

events {
    worker_connections  1024;
}

http {
    geo $dollar {
        default &quot;$&quot;;
    }

    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    server {
        listen       80;
        server_name  localhost;

        location /coreos-cloud-config.yaml {
            root /srv/http;
            sub_filter '${dollar}private_ipv4' '$remote_addr';
            sub_filter_once off;
            sub_filter_types '*';
        }

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here I’m only adding support for the $private_ipv4 substitution. In my case this is all on a local network so $remote_addr is an appropriate value to substitute. The $dollar variable is necessary to avoid nginx’s variable substitution here, it’s an ugly workaround but it works.&lt;/p&gt;

&lt;p&gt;So what we’ve done here is configured nginx to replace any occurrences of $private_ipv4 in the requested file /coreos-cloud-config.yaml, with the IP address of the remote system ($remote_addr). If the file /srv/http/coreos-cloud-config.yaml contained ‘Your IP is: $private_ipv4’, then you could use curl/etc on another system and get a response saying ‘Your IP is: 192.168.5.100’, for example.&lt;/p&gt;

&lt;p&gt;Now we can enable and start nginx.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl enable nginx
systemctl start nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;create-a-bridge&quot;&gt;Create a Bridge&lt;/h3&gt;

&lt;p&gt;In my case I want these systems on the same network segment as the host, so I’m going to create a bridge and then let QEMU create the tap device.&lt;/p&gt;

&lt;p&gt;The Arch Linux wiki details a &lt;a href=&quot;https://wiki.archlinux.org/index.php/Network_bridge&quot;&gt;number of options&lt;/a&gt; for creating a bridge.
I am going to use systemd-networkd to create a permanent bridge named br0 with a physical interface of eno1.&lt;/p&gt;

&lt;p&gt;First, I will create a few files to describe the network configuration.&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# /etc/systemd/network/br0.netdev
&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;[NetDev]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;br0&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;bridge&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Optionally specify a link address
# Useful if you have DHCP reservations (aka static DHCP)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;MACAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;01:23:45:67:89:AB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# /etc/systemd/network/br0.network
&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;[Match]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;br0&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[Network]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;DHCP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ipv4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# /etc/systemd/network/br0-slave.network
&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;[Match]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;eno1&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[Network]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;Bridge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;br0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now I need to disable dhcpcd, which I was using previously, and enable systemd-networkd instead.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl disable dhcpcd
systemctl enable systemd-networkd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After a reboot (I don’t recommend doing this remotely), connectivity should be back up as normal but with br0 having acquired a DHCP lease, rather than eno1.&lt;/p&gt;

&lt;p&gt;Finally, we need to whitelist the bridge interface for QEMU:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir -p /etc/qemu
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'allow br0'&lt;/span&gt; &amp;gt;&amp;gt; /etc/qemu/bridge.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;enable-ksm-optional&quot;&gt;Enable KSM (Optional)&lt;/h3&gt;

&lt;p&gt;We can use &lt;a href=&quot;http://www.linux-kvm.org/page/KSM&quot;&gt;Kernel Samepage Merging&lt;/a&gt; to save on memory consumption. You can search the QEMU source for MADV_MERGEABLE to get an idea of what memory is shared.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Enable KSM&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;1 &amp;gt; /sys/kernel/mm/ksm/run
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You may want to put this in a startup service to make it permanent.&lt;/p&gt;

&lt;p&gt;Later on, after starting our virtual machines, we can see how much memory we have saved:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;cat /sys/kernel/mm/ksm/pages_sharing&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;getconf PAGESIZE&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;))&lt;/span&gt; | numfmt --to&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;iec-i
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In my tests I was seeing ~4GiB saved with 20 CoreOS VMs. That may not seem like a ton but it definitely adds up when operating at scale. You can also see how much memory is being shared between the processes:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;cat /sys/kernel/mm/ksm/pages_shared&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;getconf PAGESIZE&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;))&lt;/span&gt; | numfmt --to&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;iec-i
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For me this was ~219MiB. The chart below demonstrates that we have steeper memory usage growth without KSM.&lt;/p&gt;

&lt;div id=&quot;ksm_curve_chart&quot; style=&quot;width: 800px; height: 500px&quot;&gt;
&lt;/div&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://www.gstatic.com/charts/loader.js&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
  google.charts.load('current', {'packages':['corechart']});
  google.charts.setOnLoadCallback(drawChart);

  function drawChart() {
    var data = google.visualization.arrayToDataTable([
      ['VMs', 'Without KSM', 'With KSM'],
      ['1',  384,      384],
      ['2',  768,      549],
      ['3',  1152,       714],
      ['4',  1536,      879],
      ['5',  1920,      1044],
      ['6',  2304,      1209],
      ['7',  2688,      1374],
      ['8',  3072,      1539],
      ['9',  3456,      1704],
      ['10',  3840,     1869],
      ['11',  4224,     2034],
      ['12',  4608,     2199],
      ['13',  4992,     2364],
      ['14',  5376,     2529],
      ['15',  5760,     2694],
      ['16',  6144,     2859],
      ['17',  6528,     3024],
      ['18',  6912,     3189],
      ['19',  7296,     3354],
      ['20',  7680,     3519],
    ]);

    var options = {
      title: 'Memory Usage of QEMU VMs With and Without KSM',
      curveType: 'function',
      legend: { position: 'bottom' },
      hAxis: { title: 'Number of VMs' },
      vAxis: { title: 'Memory Usage (MiB)' }
    };

    var chart = new google.visualization.LineChart(document.getElementById('ksm_curve_chart'));

    chart.draw(data, options);
  }
&lt;/script&gt;

&lt;h2 id=&quot;create-a-cloudinit-template&quot;&gt;Create a Cloudinit Template&lt;/h2&gt;

&lt;p&gt;Finally we can create our cloudinit config template. I say template because we are going to put in a placeholder for &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;DISCOVERY_URL&amp;gt;&lt;/code&gt; that a script will replace when run.&lt;/p&gt;

&lt;p&gt;You will want to substitute your own public key here for SSH access (username ‘core’). Or you could create a separate user as documented in the CoreOS cloudinit docs.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;coreos-cloud-config.yaml.template&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#cloud-config&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;ssh_authorized_keys&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ssh-rsa AAAAB3NzaC1yc2[...] (REPLACE THIS)&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;coreos&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;units&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;etcd2.service&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;start&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fleet.service&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;start&lt;/span&gt;

  &lt;span class=&quot;s&quot;&gt;etcd2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;discovery&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;DISCOVERY_URL&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;advertise-client-urls&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http://$private_ipv4:2379&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;initial-advertise-peer-urls&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http://$private_ipv4:2380&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;listen-client-urls&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http://0.0.0.0:2379&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;listen-peer-urls&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http://$private_ipv4:2380&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;DISCOVERY_URL&amp;gt;&lt;/code&gt; would normally look something like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;https://discovery.etcd.io/9e0aeb71f9b477f38e953f0050478666&lt;/code&gt;. However, these URLs are one-time use (for each cluster) and require knowing the cluster size ahead of time. They are generated by going to a URL like: &lt;code class=&quot;highlighter-rouge&quot;&gt;https://discovery.etcd.io/new?size=3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Because of this, we put in a placeholder that our script will substitute after dynamically allocating a new discovery URL during invocation.&lt;/p&gt;

&lt;h2 id=&quot;start-the-cluster&quot;&gt;Start the Cluster&lt;/h2&gt;

&lt;p&gt;First, we need qemu:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pacman -S qemu
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then, we’ll put a little script together:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;start_coreos_cluster.sh&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -eu -o pipefail

&lt;span class=&quot;nv&quot;&gt;USAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Usage: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;lt;cloudinit-template&amp;gt; &amp;lt;count&amp;gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;STAGGER_TIME_SEC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.0
&lt;span class=&quot;nv&quot;&gt;VM_MEMORY_MB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1024
&lt;span class=&quot;nv&quot;&gt;VM_CORES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;span class=&quot;nv&quot;&gt;BRIDGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;br0

&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;usage &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$USAGE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$# &lt;/span&gt;-ne 2 &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; usage

&lt;span class=&quot;nv&quot;&gt;cloudinit_template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;discovery_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;curl -s &lt;span class=&quot;s2&quot;&gt;&quot;https://discovery.etcd.io/new?size=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Discovery URL: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$discovery_url&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

sed &lt;span class=&quot;s2&quot;&gt;&quot;s|&amp;lt;DISCOVERY_URL&amp;gt;|&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$discovery_url&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;|&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cloudinit_template&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;gt; /srv/http/coreos-cloud-config.yaml

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; i &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1; i &amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;; i++ &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%02x&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;vm_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;coreos_&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$digits&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;vm_mac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;52:54:00:12:34:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$digits&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    qemu-system-x86_64 -name &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$vm_name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -m 1024 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -net bridge &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -net nic,vlan&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0,model&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;virtio,macaddr&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$vm_mac&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -boot n &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -machine &lt;span class=&quot;nv&quot;&gt;accel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kvm &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -cpu host &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -smp &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VM_CORES&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        -display none &amp;amp;

    sleep &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$STAGGER_TIME_SEC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can call this like so: &lt;code class=&quot;highlighter-rouge&quot;&gt;./start_coreos_cluster.sh coreos-cloud-config.yaml.template 3&lt;/code&gt; to start a 3-node CoreOS cluster.&lt;/p&gt;

&lt;p&gt;The script does the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Retrieves a new discovery URL based on the size of the cluster specified.&lt;/li&gt;
  &lt;li&gt;Substitutes that URL in place of the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;DISCOVERY_URL&amp;gt;&lt;/code&gt; placeholder in the specified config template.&lt;/li&gt;
  &lt;li&gt;Starts a QEMU VM in the background that will network boot. The MAC addresses are specifically set to avoid conflicts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also a few settings up at the top of the script:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;variable&lt;/th&gt;
      &lt;th&gt;default&lt;/th&gt;
      &lt;th&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;STAGGER_TIME_SEC&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;Time, in seconds, between starting each VM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;VM_MEMORY_MB&lt;/td&gt;
      &lt;td&gt;1024&lt;/td&gt;
      &lt;td&gt;Amount of memory for each VM in MiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;VM_CORES&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Number of processor cores for each VM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BRIDGE_NAME&lt;/td&gt;
      &lt;td&gt;br0&lt;/td&gt;
      &lt;td&gt;Name of the network bridge device&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;confirm-functionality&quot;&gt;Confirm Functionality&lt;/h2&gt;

&lt;p&gt;There are a few items to check that the cluster is healthy.&lt;/p&gt;

&lt;p&gt;First, check the discovery URL in a browser or with curl. For example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -s https://discovery.etcd.io/57de7e09a1376036179ca4b3092f40cc | jq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;get&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/_etcd/registry/57de7e09a1376036179ca4b3092f40cc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;dir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;nodes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/_etcd/registry/57de7e09a1376036179ca4b3092f40cc/3470e6055e4e1119&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a1576454e3bf449d9fd98c3d6b28006a=http://192.168.5.236:2380&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;modifiedIndex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1149021445&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;createdIndex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1149021445&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/_etcd/registry/57de7e09a1376036179ca4b3092f40cc/dc0df5ec4a3f1c1f&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;002ce5c216ec446fad0fdf28c4f75b51=http://192.168.5.200:2380&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;modifiedIndex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1149021527&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;createdIndex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1149021527&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/_etcd/registry/57de7e09a1376036179ca4b3092f40cc/cd968f42a6e76ec6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c1dff243172643eea483aea66984545a=http://192.168.5.237:2380&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;modifiedIndex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1149021548&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;createdIndex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1149021548&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/_etcd/registry/57de7e09a1376036179ca4b3092f40cc/dec55d937871aa93&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3ba8ca7970d64d87a395e668de7d8908=http://192.168.5.229:2380&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;modifiedIndex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1149021567&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;createdIndex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1149021567&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/_etcd/registry/57de7e09a1376036179ca4b3092f40cc/a365ceee28d65bb5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dd219995e6c04162b5520d7313148dfe=http://192.168.5.231:2380&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;modifiedIndex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1149021633&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;createdIndex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1149021633&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;modifiedIndex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1149020480&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;createdIndex&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1149020480&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here I’m piping the output to the ‘jq’ utility for pretty formatting. You can see all 3 nodes in the array have registered. If this were not the case, the nodes array would be empty or would not exist.&lt;/p&gt;

&lt;p&gt;Another thing to do is to simply login to one of the CoreOS nodes and do something like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;etcdctl cluster-health
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then you may want to throw some data into etcd:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;etcdctl mk /testing testdata
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now on other nodes, make sure the data is there:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;etcdctl get /testing
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -sL http://127.0.0.1:2379/v2/keys/testing
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 26 Jul 2016 12:55:52 -0400</pubDate>
        <link>/2016/07/26/coreos-local-cluster-in-qemu-on-arch-linux/</link>
        <guid isPermaLink="true">/2016/07/26/coreos-local-cluster-in-qemu-on-arch-linux/</guid>
        
        
      </item>
    
      <item>
        <title>Continuous Deployment of Pastely with GKE/Kubernetes, Ansible, and Jenkins</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/dewyatt/pastely-backend&quot;&gt;Pastely&lt;/a&gt; is a little web app for sharing code pastes, a la pastebin and many others.
&lt;strong&gt;Note&lt;/strong&gt;: Limited browser support due to the use of CSS flexbox. Modern Chrome/Firefox should work.
It was written for the simple purpose of learning a handful of new technologies.&lt;/p&gt;

&lt;p&gt;It is hosted in Google’s Container Engine/Kubernetes and automatically deployed with Docker, Ansible, and Jenkins.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/26.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The deployment scenario described here is not ideal but it’s a good start. Generally I believe it’s better to have separate staging and production clusters if possible, rather than using namespaces as below.&lt;/p&gt;

&lt;h1 id=&quot;technologies-overview&quot;&gt;Technologies Overview&lt;/h1&gt;

&lt;h2 id=&quot;common-technologies&quot;&gt;Common Technologies&lt;/h2&gt;

&lt;p&gt;The frontend and backend both utilize some common technologies, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.docker.com&quot;&gt;Docker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ansible.com&quot;&gt;Ansible&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kubernetes.io&quot;&gt;Kubernetes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://alpinelinux.org&quot;&gt;Alpine Linux&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;backend&quot;&gt;Backend&lt;/h2&gt;

&lt;p&gt;The backend portion provides a simple API of HTTP endpoints to store and retrieve pastes.&lt;/p&gt;

&lt;h3 id=&quot;languages&quot;&gt;Languages&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Python 3&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;librariesframeworks&quot;&gt;Libraries/Frameworks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.djangoproject.com&quot;&gt;Django&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.django-rest-framework.org&quot;&gt;Django Rest Framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tooling--software&quot;&gt;Tooling / Software&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pypi.python.org/pypi/pip&quot;&gt;pip&lt;/a&gt; + &lt;a href=&quot;https://virtualenv.pypa.io&quot;&gt;virtualenv&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://projects.unbit.it/uwsgi&quot;&gt;uWSGI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;frontend&quot;&gt;Frontend&lt;/h2&gt;

&lt;p&gt;The frontend is a plain React web app.&lt;/p&gt;

&lt;p&gt;It does not use Redux/Flux. I did an initial implementation using Alt.js but decided to keep things simple and removed it.&lt;/p&gt;

&lt;h3 id=&quot;languages-1&quot;&gt;Languages&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Javascript&lt;/li&gt;
  &lt;li&gt;ES6&lt;/li&gt;
  &lt;li&gt;JSX&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;librariesframeworks-1&quot;&gt;Libraries/Frameworks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;reactjs.com&quot;&gt;React&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/reactjs/react-router&quot;&gt;React Router&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.muicss.com/&quot;&gt;MUI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tooling--software-1&quot;&gt;Tooling / Software&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://webpack.github.io&quot;&gt;Webpack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://npmjs.com&quot;&gt;NPM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://babeljs.io&quot;&gt;Babel&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.nginx.com&quot;&gt;Nginx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;running-locally&quot;&gt;Running Locally&lt;/h1&gt;

&lt;p&gt;Running the app locally is simple.&lt;/p&gt;

&lt;h2 id=&quot;frontend-1&quot;&gt;Frontend&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/dewyatt/pastely-frontend.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;pastely-frontend
npm install
npm start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;backend-1&quot;&gt;Backend&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/dewyatt/pastely-backend.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;pastely-backend
virtualenv3 venv
. venv/bin/activate
pip install -r requirements/local.txt
python manage.py makemigrations --settings&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely.settings.local
python manage.py makemigrations --settings&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely.settings.local paste
python manage.py migrate --settings&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely.settings.local
python manage.py runserver 127.0.0.1:8000 --settings&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely.settings.local
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;connect&quot;&gt;Connect&lt;/h2&gt;

&lt;p&gt;Now you can connect to &lt;a href=&quot;http://127.0.0.1:8080&quot;&gt;http://127.0.0.1:8080&lt;/a&gt;. The Django admin interface is available at &lt;code class=&quot;highlighter-rouge&quot;&gt;/admin&lt;/code&gt;. You can create a user to access the admin interface like so:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python manage.py createsuperuser --settings&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely.settings.local
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;bootstrapping-in-gke--kubernetes&quot;&gt;Bootstrapping in GKE / Kubernetes&lt;/h1&gt;

&lt;p&gt;Getting things going within GKE is a bit more involved.&lt;/p&gt;

&lt;p&gt;To start with, you must install the &lt;a href=&quot;https://cloud.google.com/sdk&quot;&gt;Google Cloud SDK&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, you’ll want to &lt;a href=&quot;https://console.cloud.google.com/iam-admin/projects&quot;&gt;create a new project&lt;/a&gt; in the Google Cloud Platform console. This gives you a project ID that you can substitute below (mine was &lt;code class=&quot;highlighter-rouge&quot;&gt;pastely-1357&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;create-a-cluster&quot;&gt;Create a Cluster&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# initialize the Google Cloud SDK, authenticate, set default project, zone, etc.&lt;/span&gt;
gcloud init
&lt;span class=&quot;c&quot;&gt;# create a k8s cluster using the defaults&lt;/span&gt;
gcloud container clusters create pastely
&lt;span class=&quot;c&quot;&gt;# set up credentials for k8s&lt;/span&gt;
gcloud container clusters get-credentials pastely
&lt;span class=&quot;c&quot;&gt;# check: make sure the cluster is visible&lt;/span&gt;
kubectl cluster-info
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that we have a cluster running, we can create a couple of k8s namespaces to hold our staging and production resources.&lt;/p&gt;

&lt;p&gt;This makes it easier to keep things separated without creating multiple clusters.&lt;/p&gt;

&lt;p&gt;You can create namespaces directly with &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl create namespace&lt;/code&gt; or you can use YAML/JSON:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;pastely-backend/deploy
&lt;span class=&quot;c&quot;&gt;# create k8s namespaces to hold staging+production resources&lt;/span&gt;
kubectl create -f kubernetes/namespaces.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;deploy-the-backend&quot;&gt;Deploy the Backend&lt;/h2&gt;

&lt;h3 id=&quot;postgresql-database&quot;&gt;PostgreSQL Database&lt;/h3&gt;

&lt;p&gt;Now we can deploy our database.&lt;/p&gt;

&lt;p&gt;First, we’ll need to create a k8s secret that contains information like the database username/password.&lt;/p&gt;

&lt;p&gt;We’ll pass this secret information via the environment to the &lt;a href=&quot;https://hub.docker.com/_/postgres&quot;&gt;official PostgreSQL docker container&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The file &lt;code class=&quot;highlighter-rouge&quot;&gt;pastely-backend/deploy/kubernetes/secrets/staging/staging-database-secret.yaml&lt;/code&gt; contains base64-encoded data similar to the below.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Secret&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pastely-database-secret&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Opaque&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dXNlcm5hbWU=&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eW91cnBhc3N3b3Jk&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ZGF0YWJhc2VuYW1l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With it, we can create our database secret:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# create our database secret&lt;/span&gt;
kubectl create -f kubernetes/secrets/staging/staging-database-secret.yaml --namespace&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely-staging
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then we can move on to creating the database deployment.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# create a persistent disk for the postgresql database in the staging environment&lt;/span&gt;
gcloud compute disks create pastely-pg-data-staging --size 200GB
&lt;span class=&quot;c&quot;&gt;# create a deployment for the database&lt;/span&gt;
kubectl create -f kubernetes/deployments/database.yaml --namespace&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely-staging
&lt;span class=&quot;c&quot;&gt;# create a service to refer to the database via DNS&lt;/span&gt;
kubectl create -f kubernetes/services/database.yaml --namespace&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely-staging
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;backend-2&quot;&gt;Backend&lt;/h3&gt;

&lt;p&gt;First we need to build a container.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--build-arg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;deploy_environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;staging &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--build-arg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;git_sha1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;f87865de08c452475bd419cfb90b4b8d77bb1b99 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-t gcr.io/pastely-1357/pastely-backend:f87865de08c452475bd419cfb90b4b8d77bb1b99.staging.v1 .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This would build a docker container based on the git commit referenced. The arguments are passed into the Dockerfile and then to Ansible to build out the container.&lt;/p&gt;

&lt;p&gt;Once built, it can be uploaded with:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcloud docker push gcr.io/pastely-1357/pastely-backend:f87865de08c452475bd419cfb90b4b8d77bb1b99.staging.v1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This would upload it to the &lt;a href=&quot;https://console.cloud.google.com/kubernetes/images/list&quot;&gt;Google Container Registry&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now again we will want to create a secret. This time the secret is an INI file used by the Django app to retrieve the database credentials and Django secret key. It looks something like this:&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[pastely]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;SECRET_KEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;djangosecretkeyhere&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;DATABASE_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;databasename&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;DATABASE_USER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;username&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;DATABASE_PASSWORD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;yourpassword&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;DATABASE_HOST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pastely-database&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;DATABASE_PORT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5432&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can turn this into a k8s secret with:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# create a secret from our config.ini&lt;/span&gt;
kubectl create secret generic pastely-config-secret --from-file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;config.ini&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kubernetes/secrets/staging/config.ini --namespace&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely-staging
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now the first time we deploy the backend, we will want to disable the livenessProbe and readinessProbe. The reason is that they use data that is not yet in the database, so these checks will fail.&lt;/p&gt;

&lt;p&gt;One way to do this is to simply comment out the livenessProbe and readinessProbe sections of the file &lt;code class=&quot;highlighter-rouge&quot;&gt;kubernetes/deployments/backend.yaml&lt;/code&gt; file and then create the backend deployment:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# create the backend deployment&lt;/span&gt;
kubectl create -f kubernetes/deployments/backend.yaml --namespace&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely-staging
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then we can execute an interactive shell on one of the backend containers. This gives us an opportunity to perform database migrations, load fixtures, create a user, etc.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl get pods --namespace&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely-staging
NAME                                READY     STATUS    RESTARTS   AGE
pastely-backend-3062118379-4m774    1/1       Running   0          10h
pastely-backend-3062118379-kej89    1/1       Running   0          10h
pastely-database-1888716277-6nuhm   1/1       Running   0          17h
pastely-frontend-715571195-onwt9    1/1       Running   0          10h
pastely-frontend-715571195-tuilp    1/1       Running   0          10h
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -ti pastely-backend-3062118379-4m774 /bin/sh --namespace&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely-staging
. venv/bin/activate
python manage.py makemigrations --settings&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely.settings.staging
python manage.py makemigrations --settings&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely.settings.staging paste
python manage.py migrate --settings&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely.settings.staging
python manage.py loaddata health_check --settings&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely.settings.staging
python manage.py createsuperuser --settings&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely.settings.staging
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we can uncomment the livenessProbe and readinessProbe in &lt;code class=&quot;highlighter-rouge&quot;&gt;kubernetes/deployments/backend.yaml&lt;/code&gt; and modify the deployment.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# restore the livenessProbe and readinessProbe after uncommenting them&lt;/span&gt;
kubectl apply -f kubernetes/deployments/backend.yaml --namespace&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely-staging
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Finally, we can create the service for the backend.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# create the backend service so we can resolve the name 'pastely-backend' with DNS&lt;/span&gt;
kubectl create -f kubernetes/services/backend.yaml --namespace&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely-staging
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;deploy-the-frontend&quot;&gt;Deploy the Frontend&lt;/h2&gt;

&lt;h3 id=&quot;build-the-container&quot;&gt;Build the Container&lt;/h3&gt;

&lt;p&gt;Just like before, we need to build a container for the frontend.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# build our container&lt;/span&gt;
docker build --build-arg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;deploy_environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;staging --build-arg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;server_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely-staging.dewyatt.com --build-arg&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;git_sha1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;49a42187c8a51eb980a98fac0ad2e633491ae586 -t gcr.io/pastely-1357/pastely-frontend:49a42187c8a51eb980a98fac0ad2e633491ae586.staging.v1 .
&lt;span class=&quot;c&quot;&gt;# push it out to the Google Container Repository&lt;/span&gt;
gcloud docker push gcr.io/pastely-1357/pastely-frontend:49a42187c8a51eb980a98fac0ad2e633491ae586.staging.v1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then we can create the deployment and the service.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# create the deployment&lt;/span&gt;
kubectl create -f deploy/kubernetes/deployments/frontend.yaml --namespace&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely-staging
&lt;span class=&quot;c&quot;&gt;# create the service&lt;/span&gt;
kubectl create -f deploy/kubernetes/services/frontend.yaml --namespace&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely-staging
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This time, the service type is LoadBalancer. This will create a public/external IP after a few minutes.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# check to see if the external IP is ready&lt;/span&gt;
kubectl get services --namespace&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pastely-staging
NAME CLUSTER-IP EXTERNAL-IP PORT &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; AGE
pastely-backend 10.115.254.142 &amp;lt;none&amp;gt; 8000/TCP 18h
pastely-database 10.115.255.182 &amp;lt;none&amp;gt; 5432/TCP 18h
pastely-frontend 10.115.243.24 146.148.77.173 80/TCP 18h
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here we can see the frontend has an external IP address which can be accessed directly, entered into DNS, etc.&lt;/p&gt;

&lt;h1 id=&quot;continuous-deployment-with-jenkins&quot;&gt;Continuous Deployment with Jenkins&lt;/h1&gt;

&lt;p&gt;Now that everything is bootstrapped (finally!), things are much simpler.&lt;/p&gt;

&lt;p&gt;With newer versions of Jenkins, we can create a pipeline that will execute when a git repository is updated. You can store the pipeline script within the repository itself (a Jenkinsfile).&lt;/p&gt;

&lt;p&gt;For example, for the backend:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'checkout'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://github.com/dewyatt/pastely-backend.git'&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'testing'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./deploy/test.sh'&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'build-staging'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'git rev-parse HEAD | head -c 40 &amp;gt; GIT_COMMIT'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;git_sha1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'GIT_COMMIT'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./deploy/build.sh staging $git_sha1&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'deploy-staging'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./deploy/deploy.sh staging $git_sha1&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;deploy_prod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;message:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Deployed to staging. Do you want to deploy to production?'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'build-production'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./deploy/build.sh production $git_sha1&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'deploy-production'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./deploy/deploy.sh production $git_sha1&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This simply uses a couple of scripts to automatically test, build, and deploy to the staging environment when a new commit is pushed. It then prompts for approval to deploy to the production environment.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sh&lt;/code&gt; script builds a container just like we did above.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy.sh&lt;/code&gt; script uploads it to GCR and uses &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl patch&lt;/code&gt; to modify the deployment with the new image target.&lt;/p&gt;

&lt;p&gt;Kubernetes takes care of the rest by building out new pods and terminating the old ones, all transparently without interrupting service.&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Jul 2016 04:05:12 -0400</pubDate>
        <link>/2016/07/04/continuous-deployment-of-pastely-with-gke-kubernetes-ansible-jenkins/</link>
        <guid isPermaLink="true">/2016/07/04/continuous-deployment-of-pastely-with-gke-kubernetes-ansible-jenkins/</guid>
        
        
      </item>
    
      <item>
        <title>RHEL 7 authconfig complaints</title>
        <description>&lt;p&gt;The authconfig suite on RHEL 7 is commonly used to configure network authentication and authorization. In my case, I wanted LDAP authorization and Kerberos authentication.&lt;/p&gt;

&lt;p&gt;(I should actually note that this was on CentOS 7.2, rather than RHEL 7.0, but there should not be any difference.)&lt;/p&gt;

&lt;p&gt;There are 3 frontend interfaces to the authconfig suite:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;authconfig - command-line, scriptable interface&lt;/li&gt;
  &lt;li&gt;authconfig-tui - (deprecated) command-line menu-driven interface&lt;/li&gt;
  &lt;li&gt;authconfig-gtk - full graphical interface (aka system-config-authentication)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These frontends all utilize the same backend python code.&lt;/p&gt;

&lt;p&gt;Here are my complaints:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The manpage for authconfig is pretty sparse. In fact, it’s much more useful to run &lt;code class=&quot;highlighter-rouge&quot;&gt;authconfig --help&lt;/code&gt; than it is &lt;code class=&quot;highlighter-rouge&quot;&gt;man authconfig&lt;/code&gt;. This is the opposite of what it should be.&lt;/li&gt;
  &lt;li&gt;nslcd vs sssd. If you happen to have the sssd package installed at the time you run the authconfig utilities, sssd may be used. Otherwise, nslcd will be used. It will also depend on &lt;code class=&quot;highlighter-rouge&quot;&gt;--enablekrb5realmdns&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;--disablekrb5realmdns&lt;/code&gt;. This is completely transparent to the user, no notification whatsoever.&lt;/li&gt;
  &lt;li&gt;authconfig-tui is deprecated, but still recommended by some experts. Perhaps due to the fact that the deprecation is mentioned half way through the manpage in a small notes section.&lt;/li&gt;
  &lt;li&gt;All 3 interfaces have different feature sets. The plain authconfig interface exposes the most features. This may not be a huge issue, but I think the situation could be improved.&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 09 Mar 2016 11:40:55 -0500</pubDate>
        <link>/2016/03/09/rhel-7-authconfig-complaints/</link>
        <guid isPermaLink="true">/2016/03/09/rhel-7-authconfig-complaints/</guid>
        
        
      </item>
    
      <item>
        <title>&quot;Initializing audio&quot; or &quot;Audio init failed&quot; on Blackboard in Linux</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;&lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/17t.png&quot; data-jslghtbx=&quot;/assets/images/17.png&quot; data-jslghtbx-group=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Have you been unfortunate enough to come upon a screen like this on Blackboard?&lt;/p&gt;

&lt;p&gt;This is part of Blackboard Collaborate Voice (formerly Wimba Voice).&lt;/p&gt;

&lt;p&gt;In this article I will walk through the steps I took to discover the issue and solve it.&lt;/p&gt;

&lt;h1 id=&quot;the-issue&quot;&gt;The Issue&lt;/h1&gt;

&lt;p&gt;You’re browsing a Blackboard course and you encounter this:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/15t.png&quot; data-jslghtbx=&quot;/assets/images/15.png&quot; data-jslghtbx-group=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And it just sits there.&lt;/p&gt;

&lt;p&gt;It’s a Java applet (you were probably prompted to run it) and it’s doing a whole lot of nothing.&lt;/p&gt;

&lt;p&gt;Let’s examine the setup wizard page as an example: &lt;a href=&quot;http://demo2.wimba.com/demo/wizard/playback.jsp&quot;&gt;http://demo2.wimba.com/demo/wizard/playback.jsp&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-javascript&quot;&gt;The Javascript&lt;/h1&gt;

&lt;p&gt;It uses a bit of Javascript (&lt;a href=&quot;http://demo2.wimba.com/demo/ve/play.js&quot;&gt;play.js&lt;/a&gt;) to generate an appropriate applet/object. It’s either not very up-to-date or just attempts to support very old software. A few choice lines:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;w_is_Windows95&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Windows 95&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// These result in a bug in Netscape 4.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Why take the chance of bugs with other browsers?&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//////////// Linux, Solaris, etc. (probably Netscape) ////////////&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Windows 95 and Netscape? Not in my house.&lt;/p&gt;

&lt;h1 id=&quot;the-html&quot;&gt;The HTML&lt;/h1&gt;

&lt;p&gt;On Linux the Javascript will generate markup like this:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;applet&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;codebase=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://demo2.wimba.com:80&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;code=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Player.class&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;player&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;player&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;archive=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://demo2.wimba.com:80/demo/code/hwclients.jar&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;48&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;align=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bottom&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;240&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;filename&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://demo2.wimba.com/demo/wizard/audio.wav&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;loglevel&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alt&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[ Java Applet should load here ]&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;autostart&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;player&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;player&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;archive&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://demo2.wimba.com:80/demo/code/hwclients.jar&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;code&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Player.class&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;diagnostic&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;server_url&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://demo2.wimba.com:80/demo/com&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gui&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://demo2.wimba.com:80/demo/gui/player/player.zip&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ErrorMessage&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Message does not exist.\(You need to be online\to play this message)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;align&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;baseline&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;codebase&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://demo2.wimba.com:80&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;context_path&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/demo&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;param&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;font&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Arial Unicode MS, Dialog&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Java is not installed, or the version of Java is too old.
Please, run the &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript:startwizard()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Setup Wizard&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; and  select to install Java when prompted.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/applet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, in this case we can see one of the parameters is a .wav file. So we could just copy that link and access it directly.
However, let’s assume this isn’t always the case (it isn’t).&lt;/p&gt;

&lt;h1 id=&quot;debugging-it&quot;&gt;Debugging It&lt;/h1&gt;

&lt;p&gt;One thing we can do is examine output in the Java Console. You can bring up the Java Control Panel to enable the Java Console:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ $JAVA_HOME/jre/bin/ControlPanel&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or, perhaps&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ /usr/lib/jvm/java-7-oracle/bin/ControlPanel&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the Advanced tab, enable logging and select “Show console”. Save those settings and restart your browser and the Java Console will present itself to you when a Java applet is run.&lt;/p&gt;

&lt;p&gt;The output I received initially included the following line:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[info] AUDIOPROXY_ERR /home/daniel/.horizonwimba/JSecureDoor/audioproxy_1.0.4/data/audioproxy: error while loading shared libraries: libjack-0.100.0.so.0: cannot open shared object file: No such file or directory&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So, apparently the applet downloads and executes (ugh) this audioproxy program which tries to load a version of libjack that I don’t have. So, next I installed the (32-bit) jack library and created a symlink:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;# ln -s /usr/lib32/libjack.so.0 /usr/lib32/libjack-0.100.0.so.0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This allowed things to proceed a little farther:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/16.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next console output had this error:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[info] AUDIOPROXY_ERR PortAudio error at Unable to open streams: Illegal error number&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you search for “Unable to open streams: Illegal error number”, you’ll learn that the issue is related to OSS.
You can also simply examine the audioproxy executable a bit.
The program is old (‘03) and is statically linked with a fairly old (~’08) version of PortAudio.
OSS was the Linux sound system before ALSA came in at Linux 2.5.
The solution is to load/install some sort of compatibility layer that supports OSS.
For me, this was simple:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;# modprobe snd_pcm_oss&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The kernel module snd_pcm_oss is part of the compatibility layer that allows OSS to work through ALSA.
You may also try osspd which is a userland solution.&lt;/p&gt;

&lt;h1 id=&quot;final-solution&quot;&gt;Final Solution&lt;/h1&gt;

&lt;h2 id=&quot;ubuntu-1310-64-bit-saucy-salamander&quot;&gt;Ubuntu 13.10 64-bit (Saucy Salamander)&lt;/h2&gt;

&lt;p&gt;On a fresh install, this is all that is needed:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install libc6:i386 libasound2:i386 libjack-jackd2-0:i386 osspd icedtea-plugin&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo ln -s /usr/lib/i386-linux-gnu/libjack.so.0 /usr/lib/i386-linux-gnu/libjack-0.100.0.so.0&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;generic&quot;&gt;Generic&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Install the required 32-bit libraries: libc6 libasound2 libjack&lt;/li&gt;
  &lt;li&gt;Create a symlink to the 32-bit jack library:
Example: &lt;code class=&quot;highlighter-rouge&quot;&gt;ln -s /usr/lib32/libjack.so.0 /usr/lib32/libjack-0.100.0.so.0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Load OSS compatibility:
This varies by distribution.
If you’re lucky, it will be as simple as: &lt;code class=&quot;highlighter-rouge&quot;&gt;modprobe snd_pcm_oss&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ta da!&lt;/p&gt;
</description>
        <pubDate>Wed, 06 Nov 2013 11:20:21 -0500</pubDate>
        <link>/2013/11/06/initializing-audio-or-audio-init-failed-on-blackboard-in-linux/</link>
        <guid isPermaLink="true">/2013/11/06/initializing-audio-or-audio-init-failed-on-blackboard-in-linux/</guid>
        
        
      </item>
    
      <item>
        <title>fpanel.cpp</title>
        <description>&lt;p&gt;This example uses libusbx to communicate with the AVerMedia SA7001 firmware.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cm&quot;&gt;/**
* The MIT License (MIT)
*
* Copyright (c) 2013 Daniel Wyatt
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the &quot;Software&quot;), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
**/&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*
  This code is for communicating with the stock firmware of a
  Speco PC Pro front panel (AVerMedia SA7001).
*/&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;cstdlib&amp;gt;
#include &amp;lt;cstring&amp;gt;
#include &amp;lt;string&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;libusb.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define TIMEOUT_MS      10
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define ENDPOINT_FPANEL 4
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define REQUEST_LEDS        0xA0
#define REQUEST_BUTTON_STATE   0xA3
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define LED_BOTH        0
#define LED_NETWORK     1
#define LED_RECORDING   2
#define LED_OFF         3
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//is the FN button active?
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#define FLAGS_FN        (1 &amp;lt;&amp;lt; 7)
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fpanel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* Must be called before the LCD will function */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init_lcd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libusb_device_handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xaa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xaa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xaa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xaa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libusb_bulk_transfer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENDPOINT_FPANEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TIMEOUT_MS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*
    Write string to LCD.
    line: 0 or 1
    s:    maximum 8 chars
*/&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write_lcd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libusb_device_handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libusb_bulk_transfer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ENDPOINT_FPANEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TIMEOUT_MS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* set the recording and network LED states */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set_leds&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libusb_device_handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recording&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;network&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recording&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LED_RECORDING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;network&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LED_NETWORK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libusb_control_transfer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LIBUSB_REQUEST_TYPE_CLASS&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LIBUSB_RECIPIENT_INTERFACE&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LIBUSB_ENDPOINT_OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;REQUEST_LEDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TIMEOUT_MS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*
    Poll the buttons state.
    button: button pressed or 0xff if none (0 = button released)
    fn:     state of the FN button
*/&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;poll_buttons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libusb_device_handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libusb_control_transfer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LIBUSB_REQUEST_TYPE_CLASS&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LIBUSB_RECIPIENT_INTERFACE&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LIBUSB_ENDPOINT_IN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;REQUEST_BUTTON_STATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TIMEOUT_MS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FLAGS_FN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sun, 25 Aug 2013 13:30:56 -0400</pubDate>
        <link>/2013/08/25/fpanelcpp/</link>
        <guid isPermaLink="true">/2013/08/25/fpanelcpp/</guid>
        
        
      </item>
    
      <item>
        <title>Speco PC Pro Front Panel HID Firmware</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This article goes over the firmware I wrote for the front panel of my Speco PC Pro DVR which has a &lt;a href=&quot;http://www.cypress.com/?mpn=CY7C68013A-128AXC&quot;&gt;CY7C68013A-128AXC EZ-USB FX2LP&lt;/a&gt;.
It emulates a keyboard.
The repository is on github: &lt;a href=&quot;https://github.com/dewyatt/fpanelkb&quot;&gt;https://github.com/dewyatt/fpanelkb&lt;/a&gt;
This firmware is HID-compliant so it “just works”, for the most part, no need to write a PC driver.&lt;/p&gt;

&lt;h1 id=&quot;fx2lib&quot;&gt;fx2lib&lt;/h1&gt;

&lt;p&gt;The EZ-USB FX2LP Development Kit software is for Windows and comes with the Keil compiler and a supporting library for FX2LP development.
The Keil compiler is great but it is commercial software and limited to a certain output size unless you purchase a license.&lt;/p&gt;

&lt;p&gt;For Linux, we have the &lt;a href=&quot;http://sdcc.sourceforge.net/&quot;&gt;Small Device C Compiler&lt;/a&gt; compiler.
However, we cannot use the EZ-USB development library that comes with the DVK.
This is where &lt;a href=&quot;https://github.com/mulicheng/fx2lib&quot;&gt;fx2lib&lt;/a&gt; comes in.&lt;/p&gt;

&lt;h1 id=&quot;ports&quot;&gt;Ports&lt;/h1&gt;

&lt;p&gt;I discovered most of the port connections by using a multimeter. For some of them, I used a simple continuity test. For others, I uploaded firmware that would toggle ports on and off and tested the voltage on wires here and there. Lastly, for a few I had to resort to disassembling the stock firmware for a hint.
The results:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;port(s)&lt;/th&gt;
      &lt;th&gt;function&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;PA0&lt;/td&gt;
      &lt;td&gt;Infrared receiver&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PA1-PA4&lt;/td&gt;
      &lt;td&gt;Not sure, reported as flags in keys report of stock firmware (last byte), alongside FN key&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PA5&lt;/td&gt;
      &lt;td&gt;LCD, E&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PA6&lt;/td&gt;
      &lt;td&gt;LCD, RS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PA7&lt;/td&gt;
      &lt;td&gt;LCD, RW&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PB0-PB1&lt;/td&gt;
      &lt;td&gt;Dial&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PB2-PB5&lt;/td&gt;
      &lt;td&gt;Shuttle wheel&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PB6-PB7&lt;/td&gt;
      &lt;td&gt;No clue, though they are read by the stock firmware&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PC0-PC7&lt;/td&gt;
      &lt;td&gt;LCD, DATA&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PD0-PD4&lt;/td&gt;
      &lt;td&gt;Button matrix&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PD5&lt;/td&gt;
      &lt;td&gt;Recording LED&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PD6&lt;/td&gt;
      &lt;td&gt;Network LED&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PD7&lt;/td&gt;
      &lt;td&gt;FN button LED&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PE0-PE7&lt;/td&gt;
      &lt;td&gt;Button matrix&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;human-interface-device&quot;&gt;Human Interface Device&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/USB_human_interface_device_class&quot;&gt;USB Human Interface Devices (HID)&lt;/a&gt; are a class of USB devices well-suited for things like keyboards and mice.
What’s nice about an HID device is that it generally does not require writing a driver on the PC side.&lt;/p&gt;

&lt;p&gt;HID devices use descriptors to describe reports.
They’re a bit confusing at first.
The descriptor fpanelkb uses is located at &lt;a href=&quot;https://github.com/dewyatt/fpanelkb/blob/5e3d610/src/dscr.a51&quot;&gt;src/dscr.a51&lt;/a&gt;.
Here is an excerpt:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                                      ;;;lcd (first byte = line(0/1), 8 bytes are character data)
  .db 0x06, 0x00, 0xff              ;   USAGE_PAGE (Vendor Defined Page 1)
  .db 0x09, 0x01                    ;   USAGE (Vendor Usage 1)
  .db 0x85, 0x03                    ;   REPORT_ID (3)
  .db 0x75, 0x08                    ;   REPORT_SIZE (8)
  .db 0x95, 0x09                    ;   REPORT_COUNT (9)
  .db 0x92, 0x00, 0x01              ;   OUTPUT (Data,Ary,Abs,Buf)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This particular report is for writing to the LCD. It has a report ID so we can differentiate between the other 3 reports. It consists of 9 bytes (REPORT_SIZE * REPORT_COUNT = 72 bits).&lt;/p&gt;

&lt;h1 id=&quot;buttons&quot;&gt;Buttons&lt;/h1&gt;

&lt;p&gt;There are 39 pushbuttons. They are arranged in a matrix and 7 buttons can be pressed at a time.
The code is a bit confusing if you’re not accustomed to dealing with button matrices.
Resources on button matrices:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://pcbheaven.com/wikipages/How_Key_Matrices_Works/&quot;&gt;How a Key Matrix Work&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.openmusiclabs.com/learning/digital/input-matrix-scanning/&quot;&gt;Input Matrix Scanning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;WORD&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_keycode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xBC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xDC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xF4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xF8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//Fills buttons[7] array with any pressed keys
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scan_buttons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//overly complex version:
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//IOD = ( IOD &amp;amp; 0xE0 ) | (0x1F &amp;amp; (~(1 &amp;lt;&amp;lt; i)));
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IOD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Turn on all bits except top 3 (LED outputs)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IOD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Turn off column i
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;IOE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_keycode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;IOD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;IOE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_keycode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;IOD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;IOE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_keycode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;IOE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scan_buttons&lt;/code&gt; is called every 5 milliseconds using a timer. This takes care of &lt;a href=&quot;http://www.labbookpages.co.uk/electronics/debounce.html&quot;&gt;debouncing&lt;/a&gt;. It fills the &lt;code class=&quot;highlighter-rouge&quot;&gt;buttons[7]&lt;/code&gt; array with any pressed buttons (0 if nothing pressed).&lt;/p&gt;

&lt;p&gt;When a button is pressed on the front panel, it is mapped to a keyboard key using &lt;code class=&quot;highlighter-rouge&quot;&gt;button_keymap[]&lt;/code&gt; which uses constants defined in &lt;a href=&quot;https://github.com/dewyatt/fpanelkb/blob/5e3d610/include/hidkeys.h&quot;&gt;include/hidkeys.h&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;wheels&quot;&gt;Wheels&lt;/h1&gt;

&lt;p&gt;There are two “wheels”. One is the shuttle wheel, the spring-loaded wheel that returns to a neutral position when you release it. This is typically used for fast-forwarding and rewinding at different speeds. It is mapped to keyboard keys via &lt;code class=&quot;highlighter-rouge&quot;&gt;shuttle_keymap[]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The other wheel is more of a dial. It has an indentation to rest your finger and spin it. It is typically used for frame-by-frame seeking. It is mapped to keyboard keys via &lt;code class=&quot;highlighter-rouge&quot;&gt;dial_keymap[]&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;infrared&quot;&gt;Infrared&lt;/h1&gt;

&lt;p&gt;The infrared receiver is connected to PA0.
When infrared light is present, PA0 is driven LOW, otherwise it remains HIGH.
The code is somewhat interesting. This is how it’s used in &lt;a href=&quot;https://github.com/dewyatt/fpanelkb/blob/5e3d610/src/device.c&quot;&gt;src/device.c&lt;/a&gt; :&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c1&quot;&gt;//init
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ir_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ir_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button_pressed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;got_ir&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//infrared
&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decode_ir&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote_key_map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;send_key_report&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EP1INCS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bmEPBUSY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;send_key_report&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;ir_start&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ir_init()&lt;/code&gt; sets up a timer and external interrupt but does not enable them. &lt;code class=&quot;highlighter-rouge&quot;&gt;ir_start()&lt;/code&gt; enables external interrupt 0 (falling edge) which is conveniently on the IR port (PA0). When the interrupt triggers, we end up in &lt;a href=&quot;https://github.com/dewyatt/fpanelkb/blob/5e3d610/src/ir.c&quot;&gt;ir.c&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ir_ie0_isr()&lt;/code&gt;.
This function enables a timer for RC6_UNIT/4 microseconds. See &lt;a href=&quot;http://www.sbprojects.com/knowledge/ir/rc6.php&quot;&gt;this&lt;/a&gt; page for info on RC-6 Mode 0. This lets us jump part way into the IR stream. When the timer triggers, we’ll land in &lt;a href=&quot;https://github.com/dewyatt/fpanelkb/blob/5e3d610/src/ir.c&quot;&gt;ir.c&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;ir_timer_isr()&lt;/code&gt;.
This function records 58 samples at 444 microsecond intervals. It’s important that this function simply record the data and not interpret it as we’re dealing with some tight timing on a 48MHz CPU.
Once all 58 samples have been recorded, &lt;code class=&quot;highlighter-rouge&quot;&gt;got_ir&lt;/code&gt; is set to TRUE. At this point, &lt;code class=&quot;highlighter-rouge&quot;&gt;decode_ir&lt;/code&gt; can be called to see if it is a valid RC-6 Mode 0 data stream.&lt;/p&gt;

&lt;p&gt;The remote commands are then mapped to keyboard keys with &lt;code class=&quot;highlighter-rouge&quot;&gt;remote_key_map()&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;leds&quot;&gt;LEDs&lt;/h1&gt;

&lt;p&gt;There are 3 LEDs total. The recording LED, network LED, and the FN button LED (LED under the FN button).
They use up ports PD5, PD6, and PD7, respectively.&lt;/p&gt;

&lt;p&gt;The FN LED is used as the CAPS LOCK key and is a separate HID report. The firmware handles it as follows:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EP1OUTCS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bmEPBUSY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//report id
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EP1OUTBUF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//keyboard LEDs
&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PD7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//caps lock (FN button) LED
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EP1OUTBUF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;PD7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The other LEDs are handled a bit farther down:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;c1&quot;&gt;//recording &amp;amp; network LEDs
&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PD5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EP1OUTBUF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PD6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EP1OUTBUF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These require a little bit of software on the client side to control.
There are a couple of libraries available for raw HID I/O:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://bfoz.github.io/libhid/&quot;&gt;libhid&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.signal11.us/oss/hidapi/&quot;&gt;hidapi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I used hidapi. Here is an excerpt from &lt;a href=&quot;https://github.com/dewyatt/fpanelkb/blob/5e3d610/tests/leds.c&quot;&gt;tests/leds.c&lt;/a&gt; :&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;leds_write&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hid_device&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recording&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;network&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//byte 0 is the Report ID (4)
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//byte 1 is the state of the LEDs
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recording&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;network&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hid_write&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Warning: hid_write failed&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;lcd&quot;&gt;LCD&lt;/h1&gt;

&lt;p&gt;The LCD is &lt;a href=&quot;http://en.wikipedia.org/wiki/Hitachi_HD44780_LCD_controller&quot;&gt;HD44780&lt;/a&gt; compatible.
There are a ton of libraries to handle these display controllers.
I wrote my little library in &lt;a href=&quot;https://github.com/dewyatt/fpanelkb/blob/5e3d610/src/lcd.c&quot;&gt;src/lcd.c&lt;/a&gt;.
The code that handles LCD reports in the firmware is simple:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;      &lt;span class=&quot;c1&quot;&gt;//LCD
&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lcd_goto&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EP1OUTBUF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;EP1OUTBUF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lcd_write_string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EP1OUTBUF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similarly to the LEDs, the LCD requires client-side software.
Here is an excerpt from &lt;a href=&quot;https://github.com/dewyatt/fpanelkb/blob/5e3d610/tests/lcd.c&quot;&gt;tests/lcd.c&lt;/a&gt; :&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lcd_write&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hid_device&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//byte 0 is the Report ID (3)
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//byte 1 is the LCD line (0 or 1)
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//copy the string to &amp;amp;buffer[2]
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;strncpy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//fill out the rest of the string with spaces if necessary
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//send it off
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hid_write&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Warning: hid_write failed&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 19 Aug 2013 13:16:38 -0400</pubDate>
        <link>/2013/08/19/speco-pc-pro-front-panel-hid-firmware/</link>
        <guid isPermaLink="true">/2013/08/19/speco-pc-pro-front-panel-hid-firmware/</guid>
        
        
      </item>
    
      <item>
        <title>Speco PC Pro (Under the Hood)</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;I recently acquired a Speco PC Pro (8 channel) DVR.
It’s a CCTV DVR that a business might use to record the feed from their security cameras.
What interested me in this DVR was that it is like a standard PC but with some interesting hardware added on (the front panel, the alarm inputs, the output relays, CCTV stuff, etc).
Here are the major hardware specs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AIMB-562 motherboard&lt;/li&gt;
  &lt;li&gt;Intel E2160 (1.8GHz dual-core)&lt;/li&gt;
  &lt;li&gt;1024MiB RAM&lt;/li&gt;
  &lt;li&gt;Nvidia GeForce 9400 GT (128MiB)&lt;/li&gt;
  &lt;li&gt;2GB PQI IDE DiskOnModule flash drive w/write protect switch (Windows XP Embedded)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The front panel of the device is one of the pieces I found interesting.
It connects via USB, requires a proprietary firmware blob to function, and uses an undocumented protocol.
I reverse engineered most of this protocol and wrote code to support the LCD, LEDs, and buttons in Linux.
This article will focus on exploring the front panel and examining the protocol used by the stock firmware.
The next article will involve writing the open-source replacement firmware.&lt;/p&gt;

&lt;h1 id=&quot;first-impressions&quot;&gt;First Impressions&lt;/h1&gt;

&lt;p&gt;I didn’t know what software, if any, would be on this device when I purchased it.
When I fired it up, it booted into the PC Pro software:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/7t.jpg&quot; data-jslghtbx=&quot;/assets/images/7.jpg&quot; data-jslghtbx-group=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I scoured the internet and located a PDF manual: &lt;a href=&quot;/assets/PCPro_PCLMan.pdf&quot;&gt;PCPro_PCLMan.pdf&lt;/a&gt;
This document confirms that it runs Windows XP Embedded.
It seemed pretty restricted at first glance.
It has a (mostly) read-only drive with a ramdisk driver. No taskbar. No alt+tab, ctrl+esc, ctrl+alt+del, etc.&lt;/p&gt;

&lt;h1 id=&quot;escaping-the-shell&quot;&gt;Escaping the Shell&lt;/h1&gt;

&lt;p&gt;There are numerous ways to bypass the restrictions of this shell. A couple simple methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There is a menu under Setup-&amp;gt;System-&amp;gt;System Configuration that lets you install/configure Printers. It’s the standard Windows XP control panel option. With View-&amp;gt;Explorer Bar-&amp;gt;Folders, it becomes the standard folder view of explorer.exe.&lt;/li&gt;
  &lt;li&gt;Ctrl+alt+del seemed to actually function in the early boot stages. It didn’t launch the standard taskmgr.exe but it had an option to do so.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I killed DVR.exe and found myself staring at…nothing.
I tried starting explorer.exe but it only opened the folder view, it didn’t launch the full shell.
I found the shell was set to some PC Pro executable, SN.exe, in the registry (&lt;code class=&quot;highlighter-rouge&quot;&gt;HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell&lt;/code&gt;).
I modified the shell back to explorer.exe and launched it with taskmgr.
This did what I wanted but the machine would always reboot about a minute after killing DVR.exe.
I traced this to a watchdog started in ArgusV.dll via DVR.exe (Argus 5, apparently the name of the PCIe card that handles video/sensors/relays).
A simple solution was to kill DVR.exe very early during launch, before it called ArgusV.dll:A5_StartWatchDog.&lt;/p&gt;

&lt;p&gt;DVR.exe also had an annoying habit of hiding the taskbar so I found myself using WinSpy++ to unhide Shell_TrayWnd occasionally.
Poking around in the registry, I found &lt;code class=&quot;highlighter-rouge&quot;&gt;HKLM\Software\DSS\DVR\System\DesktopLock&lt;/code&gt; which seemed interesting.
However, I found that any modifications here were reset whenever DVR.exe was relaunched.
The reason is that the system drive is a read-only ramdisk so DVR.exe was saving it’s settings elsewhere and then importing them into the registry at launch.
I found the settings were stored in the Storage Path location &lt;code class=&quot;highlighter-rouge&quot;&gt;D:\DVRInfo\Registry.ini&lt;/code&gt;.
This is just a renamed .reg file.
Setting &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;DesktopLock&quot;=dword:00000000&lt;/code&gt; in this INI file lessened some of the restrictions.&lt;/p&gt;

&lt;h1 id=&quot;booting-linux&quot;&gt;Booting Linux&lt;/h1&gt;

&lt;p&gt;Regardless, at this point I decided I wanted to try booting Linux.
It PXE booted with no hassle.
lsusb showed this interesting device:
&lt;code class=&quot;highlighter-rouge&quot;&gt;Bus 001 Device 002: ID 04b4:0084 Cypress Semiconductor Corp. &lt;/code&gt;
Searching the internet yielded no information on this specific VID:PID.
I physically disassembled the DVR and found the front panel has a PCB with a &lt;a href=&quot;http://www.cypress.com/?mpn=CY7C68013A-128AXC&quot;&gt;CY7C68013A-128AXC&lt;/a&gt; EZ-USB FX2LP. This is what controls the 8x2 LCD, LEDs, buttons, and infrared sensor.
This is an interesting device that provides a USB interface and an 8051 MCU.
The datasheet (Technical Reference Manual) is available &lt;a href=&quot;http://www.cypress.com/?rID=38232&quot;&gt;here&lt;/a&gt;.
After reading up on it a few minutes, I found that it requires firmware which can either be loaded from an EEPROM or uploaded directly into RAM.
There was no EEPROM on the PCB and the fact that this device showed up as “Cypress …” told me it was probably not programmed.
Once the firmware is uploaded, a new device will show up.
I wanted to know how to communicate with the stock firmware, so I decided to load up VirtualBox and capture the USB traffic while DVR.exe was launching .
The advantage to doing it this way is that there is no hardware watchdog to get in the way.
(There are a number of other ways to go about this!)&lt;/p&gt;

&lt;h1 id=&quot;running-in-virtualbox&quot;&gt;Running in VirtualBox&lt;/h1&gt;

&lt;p&gt;I used dd to make a copy of the DiskOnModule drive and created a VDI disk from it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# dd if=/dev/sdb of=sdb.dd
# VBoxManage convertdd sdb.dd sdb.vdi --format VDI
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I then created a VM (Windows XP 32-bit, 1024MiB RAM) and launched it.
I connected the front panel USB cables to my development machine’s motherboard.
Once XP Embedded booted up, I was greeted with some error about a serial.
This was the shell, SN.exe, likely checking the serial against some hardware signature and complaining.
I decided to simply set the shell back to explorer.exe.
I used &lt;code class=&quot;highlighter-rouge&quot;&gt;chntpw -e&lt;/code&gt; on &lt;code class=&quot;highlighter-rouge&quot;&gt;\Windows\System32\config\SOFTWARE&lt;/code&gt; (in the VDI) to edit the key &lt;code class=&quot;highlighter-rouge&quot;&gt;HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell&lt;/code&gt; and relaunched the VM.
This results in a much more standard Windows XP experience.
Now, I looked at the available USB devices in VirtualBox and found the familiar “Unknown device 04b4:0084”.
Once connected, something interesting happened.
I found the device disappeared and a new device appeared: &lt;code class=&quot;highlighter-rouge&quot;&gt;AverMedia SA7001&lt;/code&gt;.
What’s happening is the firmware is immediately being uploaded to the FX2LP which then “ReNumerates”.&lt;/p&gt;

&lt;p&gt;I loaded usbmon in my Linux host (&lt;code class=&quot;highlighter-rouge&quot;&gt;modprobe usbmon&lt;/code&gt;) and launched Wireshark to capture the USB traffic.
I launched DVR.exe in the VM and captured a good bit of traffic.
To be clear, it is not actually DVR.exe that is generating all this traffic, it’s FPanel.exe. The PC Pro software is a collection of separate programs that work together via FindWindow/PostMessage.
So, I found that FPanel.exe, upon launching, performs an endless number of USB control IN transfers.
I guessed that it was probably polling the state of the device (which was a little disappointing as it seems a waste of resources).
I captured the traffic as I pressed a button here and there and found that this control transfer was indeed affected by button presses.
The first byte indicates an event:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;byte0&lt;/th&gt;
      &lt;th&gt;meaning&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0xff&lt;/td&gt;
      &lt;td&gt;nothing new&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;button released&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;anything else&lt;/td&gt;
      &lt;td&gt;identifier of button currently pressed&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The last byte is a group of flags indicating the state of the FN key and a few other bits I don’t have time to investigate.&lt;/p&gt;

&lt;p&gt;I searched through the capture for messages I saw on the 8x2 LCD screen as well.
A quick examination revealed there was a BULK endpoint which took a format like so:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;line&amp;gt; &amp;lt;char0&amp;gt; ... &amp;lt;char7&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where line was 0 for the first line of the LCD, 1 for the second. For example:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0x00, Hello!!!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the LEDs I had to step through DVR.exe until I saw one of the LEDs change state and then review the USB traffic.
I won’t go into details here as the &lt;a href=&quot;/2013/08/25/fpanelcpp/&quot;&gt;source code&lt;/a&gt; later on speaks for itself.
Now I knew something of the protocol used to communicate.
However, I wanted to be able to do this in Linux.
That required loading the firmware blob in Linux.&lt;/p&gt;

&lt;h1 id=&quot;extracting-the-firmware&quot;&gt;Extracting the firmware&lt;/h1&gt;

&lt;p&gt;Now, I could just try to extract the firmware from the usb traffic. However, there is an easier way.
I downloaded the FX2LP Development Kit ISO from &lt;a href=&quot;http://www.cypress.com/?rID=14321&quot;&gt;here&lt;/a&gt;.
Reading the EZ-USB Development Kit User Guide revealed that the driver loading the firmware is CyLoad.sys (this can be verified in Device Manager). The INF file &lt;code class=&quot;highlighter-rouge&quot;&gt;/WINDOWS/INF/CyLoad.inf&lt;/code&gt; indicated it loads &lt;code class=&quot;highlighter-rouge&quot;&gt;/WINDOWS/system32/CyLoad/CyLoad.spt&lt;/code&gt;. The spt is a script file that contains .ihx (&lt;a href=&quot;http://en.wikipedia.org/wiki/Intel_HEX&quot;&gt;Intel Hex&lt;/a&gt;) that is run on the 8051.
I found a tool to extract the .ihx files from the .spt script: &lt;a href=&quot;https://ftp.dlitz.net/pub/dlitz/cyusb-fw-extract/current/cyusb-fw-extract.py&quot;&gt;cyusb-fw-extract&lt;/a&gt;
I extracted the files with:
&lt;code class=&quot;highlighter-rouge&quot;&gt;python2 cyusb-fw-extract.py -v -oavermedia ~/CyLoad.spt&lt;/code&gt;
With 76 warnings, it did manage to extract avermedia_1.ihx and avermedia_2.ihx (I renamed these to .hex).&lt;/p&gt;

&lt;p&gt;Control Center is the program that generates the spt script files.
The source is available with the DVK at &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Cypress\Cypress Suite USB 3.4.7\CyUSB.NET\examples\Control Center\Form1.cs&lt;/code&gt; so I decided if the .ihx files generated did not work, I would start my investigation there.&lt;/p&gt;

&lt;p&gt;So, I wondered, how can I load this firmware in Linux?&lt;/p&gt;

&lt;h1 id=&quot;loading-the-firmware-in-linux&quot;&gt;Loading the firmware in Linux&lt;/h1&gt;

&lt;p&gt;I found there are a few tools that are supposed to be able to load this firmware in Linux.
However, only one wanted to work for me: &lt;a href=&quot;http://www.triplespark.net/elec/periph/USB-FX2/software/&quot;&gt;cycfx2prog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After resetting the device (unplugging the USB cables so it shows up as 04b4:0084 again), I used the following sequence of commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ./cycfx2prog -id=04b4.0084 prg:avermedia_1.hex
# ./cycfx2prog -id=04b4.0084 run
# ./cycfx2prog -id=04b4.0084 prg:avermedia_2.hex
# ./cycfx2prog -id=04b4.0084 run
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note: avermedia_1.hex is not actually necessary, it seems to be some kind of a stub.&lt;/p&gt;

&lt;p&gt;After this, the new device shows up on the USB bus:
&lt;code class=&quot;highlighter-rouge&quot;&gt;Bus 001 Device 004: ID 07ca:a002 AVerMedia Technologies, Inc. &lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;communicating-with-the-firmware&quot;&gt;Communicating with the firmware&lt;/h1&gt;

&lt;p&gt;Now that I had the firmware loaded in Linux, I wanted to communicate with it!
The example, using libusbx, is &lt;a href=&quot;/2013/08/25/fpanelcpp/&quot;&gt;here.&lt;/a&gt;
It supports the buttons, LCD, and LEDs.
I don’t have the remote control for the DVR so I can’t test the IR functionality.
It may be that the IR input is in the 11-byte USB control IN transfer, I don’t know.&lt;/p&gt;

&lt;h1 id=&quot;open-source-firmware&quot;&gt;Open-source firmware!&lt;/h1&gt;

&lt;p&gt;So far, this is what’s possible:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Load the proprietary firmware in Linux&lt;/li&gt;
  &lt;li&gt;Read button state&lt;/li&gt;
  &lt;li&gt;Write to the LCD&lt;/li&gt;
  &lt;li&gt;Control the LEDs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, this all requires custom software on the PC and raw USB I/O. Plus, it requires that proprietary firmware blob which isn’t really ideal.&lt;/p&gt;

&lt;p&gt;In the next article I will go over how I wrote open-source firmware to solve some of these issues.&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Jul 2013 07:25:55 -0400</pubDate>
        <link>/2013/07/18/speco-pc-pro-under-the-hood/</link>
        <guid isPermaLink="true">/2013/07/18/speco-pc-pro-under-the-hood/</guid>
        
        
      </item>
    
      <item>
        <title>Seagate External Drive LEDs in Linux</title>
        <description>&lt;p&gt;&lt;span class=&quot;note&quot;&gt;
&lt;span&gt;
&lt;strong&gt;Note&lt;/strong&gt;: If you simply want the software to control the LEDs, see &lt;a href=&quot;http://github.com/dewyatt/seagate-leds&quot;&gt;seagate-leds&lt;/a&gt;.
&lt;/span&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;&lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/18t.jpg&quot; data-jslghtbx=&quot;/assets/images/18.jpg&quot; data-jslghtbx-group=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recently, I purchased a Seagate GoFlex Desk USB 3.0 external hard drive (Model STAC1000101).
(These seem to have been replaced with the Backup Plus Desktop).
This drive is equipped with a pulsing (PWM) activity LED and 4 other LEDs that form a capacity gauge indicating the remaining disk space.
I noticed these LEDs don’t function in Linux and there does not appear to be any Linux software to support them.&lt;/p&gt;

&lt;p&gt;So naturally I felt an obligation to fill in this little feature gap.
I’m not aiming for a full alternative to the Windows software, I just want to be able to control these LEDs in Linux.&lt;/p&gt;

&lt;p&gt;There were two obvious ways to proceed:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Analyze the USB traffic generated by the Windows software&lt;/li&gt;
  &lt;li&gt;Debug the Windows software and find the LED control functions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I will start off with #1.&lt;/p&gt;

&lt;h1 id=&quot;analyzing-usb-traffic&quot;&gt;Analyzing USB traffic&lt;/h1&gt;

&lt;p&gt;There are a number of ways to capture the USB traffic. Here’s my plan:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Run Windows in a VM&lt;/li&gt;
  &lt;li&gt;Capture the traffic with usbmon&lt;/li&gt;
  &lt;li&gt;Analyze the traffic with Wireshark&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;windows-software&quot;&gt;Windows software&lt;/h2&gt;

&lt;p&gt;There are a few different pieces of software available to work with these drives in Windows:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.seagate.com/support/external-hard-drives/portable-hard-drives/expansion-portable/drive-settings-master-dl/&quot;&gt;Seagate Drive Settings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.seagate.com/support/external-hard-drives/portable-hard-drives/goflex/goflex-software-master&quot;&gt;Seagate Dashboard&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.seagate.com/support/software/dashboard/seagate-dashboard-master-dl/&quot;&gt;Seagate Dashboard 2.0&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Seagate Drive Settings was a tad buggy so I avoided it.
Seagate Dashboard is the software that comes bundled on the drive so I decided it was the best place to start.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;note&quot;&gt;
&lt;span&gt;
&lt;strong&gt;Interesting note&lt;/strong&gt;: The package GoFlex_BundledSW.zip contains two &lt;strong&gt;.svn&lt;/strong&gt; directories that point to an internet-accessible SVN server at &lt;a href=&quot;https://sjsvn.memeo.us:22223/ocsvn/dashboard&quot;&gt;https://sjsvn.memeo.us:22223/ocsvn/dashboard&lt;/a&gt; and an author of jtran. Oops!
&lt;/span&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I installed it in a Windows 7 VirtualBox VM.
When I connected my drive, all 5 of the LEDs turned on which is perfect.
The only partition I had was an ext4 partition so I was glad to see Seagate Dashboard did not really mind too much.&lt;/p&gt;

&lt;p&gt;After that, I located the option to control the LEDs:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/1t.jpg&quot; data-jslghtbx=&quot;/assets/images/1.jpg&quot; data-jslghtbx-group=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That will make it easier to trim down the USB traffic to only what I am interested in.&lt;/p&gt;

&lt;h2 id=&quot;usbmonwireshark&quot;&gt;usbmon/Wireshark&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.kernel.org/doc/Documentation/usb/usbmon.txt&quot;&gt;usbmon&lt;/a&gt; is a linux module that enables the capture of I/O traces on the USB bus. I’ll use &lt;a href=&quot;http://www.wireshark.org&quot;&gt;Wireshark&lt;/a&gt; as well because it has nice dissectors and a GUI. First, I loaded the usbmon module:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;# modprobe usbmon&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This creates a device for each USB bus: /dev/usbmon1, /dev/usbmon2, … (usbmon0 is “all buses”). Now I need to determine which bus the drive is on:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lsusb
$ lsusb
Bus 001 Device 002: ID 0bc2:50a1 Seagate RSS LLC
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The drive is on bus 1 (device 2). That means /dev/usbmon1 is the device I will use to capture traces. To avoid the need to run Wireshark as root, I modified the permissions of this device:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;# chmod o=rw /dev/usbmon1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;note&quot;&gt;
&lt;span&gt;
&lt;strong&gt;Note&lt;/strong&gt;: Obviously this creates a bit of security issue until usbmon is unloaded.
&lt;/span&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-capture&quot;&gt;The Capture&lt;/h2&gt;

&lt;p&gt;For my first capture I wanted to see the traffic generated when pressing “Turn Lights On”. The steps I took were:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I made sure the LEDs were off&lt;/li&gt;
  &lt;li&gt;I started a capture in Wireshark&lt;/li&gt;
  &lt;li&gt;I pressed the “Turn Lights On” button&lt;/li&gt;
  &lt;li&gt;I stopped the capture&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I repeated this with the “Turn Lights Off” option.
The resulting captures:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/turn_leds_on.pcapng&quot;&gt;turn_leds_on.pcapng&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/assets/turn_leds_off.pcapng&quot;&gt;turn_leds_off.pcapng&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll analyze turn_lights_on next.&lt;/p&gt;

&lt;h2 id=&quot;analysis&quot;&gt;Analysis&lt;/h2&gt;

&lt;p&gt;When I originally viewed the turn_lights_on capture in Wireshark, I found it to be a bit lacking. The dissectors were not giving much information.&lt;/p&gt;

&lt;p&gt;A quick look through the data turned up the strings “USBS” and “USBC” which, thanks to Google, pointed me in the right direction. Apparently Wireshark did not identify the interface class as mass storage and thus failed to identify certain SCSI protocol elements. A &lt;a href=&quot;http://bugs.wireshark.org/bugzilla/show_bug.cgi?id=8131&quot;&gt;quick patch&lt;/a&gt; yielded something &lt;em&gt;slightly&lt;/em&gt; better:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;jslghtbx-thmb&quot; src=&quot;/assets/images/2t.jpg&quot; data-jslghtbx=&quot;/assets/images/2.jpg&quot; data-jslghtbx-group=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The SCSI Inquiry pieces are generally a &lt;em&gt;read&lt;/em&gt; operation used for obtaining serial numbers, etc. What I’m interested in are the SCSI commands.&lt;/p&gt;

&lt;h2 id=&quot;scsi-commands&quot;&gt;SCSI Commands&lt;/h2&gt;

&lt;p&gt;Here’s the first SCSI command (0xFA), as printed in Wireshark:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;No.     Time           Source                Destination           Protocol Length Info
     71 0.098032000    host                  2.2                   USBMS    95     SCSI Command: 0xfa LUN:0x00 

Frame 71: 95 bytes on wire (760 bits), 95 bytes captured (760 bits) on interface 0
USB URB
USB Mass Storage
    Signature: 0x43425355
    Tag: 0x864e8d58
    DataTransferLength: 4
    Flags: 0x80
    .... 0000 = LUN: 0x00
    ...0 1010 = CDB Length: 0x0a
SCSI CDB 0xfa
    [LUN: 0]
    [Command Set:Direct Access Device (0x00) (Using default commandset)]
    SPC-2 Opcode: Unknown (0xfa)
    Data (10 bytes)

0000  c0 03 0c ea 03 88 ff ff 53 03 02 02 02 00 2d 00   ........S.....-.
0010  b3 23 e7 50 00 00 00 00 3a 0d 0b 00 8d ff ff ff   .#.P....:.......
0020  1f 00 00 00 1f 00 00 00 00 00 00 00 00 00 00 00   ................
0030  00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00   ................
0040  55 53 42 43 58 8d 4e 86 04 00 00 00 80 00 0a fa   USBCX.N.........
0050  00 00 00 00 00 04 00 00 00 00 00 00 00 00 00      ...............
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Wireshark is not as friendly as it could be here, it does not tell me whether this USBMS operation is IN or OUT. This can be determined by examining the Flags item under USB Mass Storage. &lt;code class=&quot;highlighter-rouge&quot;&gt;0x80 =&amp;gt; IN&lt;/code&gt;. Reading through &lt;a href=&quot;https://github.com/torvalds/linux/blob/master/include/linux/usb/storage.h&quot;&gt;storage.h&lt;/a&gt; of the linux kernel source is helpful here as well.
This command is requesting 4 bytes from the drive (DataTransferLength).&lt;/p&gt;

&lt;p&gt;The data is returned in #74:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;No.     Time           Source                Destination           Protocol Length Info
     74 0.101040000    2.1                   host                  USB      68     URB_BULK in

Frame 74: 68 bytes on wire (544 bits), 68 bytes captured (544 bits) on interface 0
USB URB
Leftover Capture Data: 01ff55aa
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The interesting part is the “Leftover capture data”. These are the 4 bytes being received by the host (computer): &lt;code class=&quot;highlighter-rouge&quot;&gt;01 ff 55 aa&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Moving on to the next SCSI command (0xF9):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;No.     Time           Source                Destination           Protocol Length Info
    147 0.204948000    host                  2.2                   USBMS    95     SCSI Command: 0xf9 LUN:0x00 

Frame 147: 95 bytes on wire (760 bits), 95 bytes captured (760 bits) on interface 0
USB URB
USB Mass Storage
    Signature: 0x43425355
    Tag: 0x864e8d58
    DataTransferLength: 4
    Flags: 0x00
    .... 0000 = LUN: 0x00
    ...0 1010 = CDB Length: 0x0a
SCSI CDB 0xf9
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This command is sending 4 bytes to the drive. These bytes are in #149 and are: &lt;code class=&quot;highlighter-rouge&quot;&gt;02 ff 00 00&lt;/code&gt;. I found the next SCSI command to be 0xF7 which reads in these bytes: &lt;code class=&quot;highlighter-rouge&quot;&gt;04 01 00 00&lt;/code&gt;. The final command was 0xF8 which sends: &lt;code class=&quot;highlighter-rouge&quot;&gt;04 0f 00 00&lt;/code&gt;. These are all the important parts.&lt;/p&gt;

&lt;h2 id=&quot;capture-summary&quot;&gt;Capture Summary&lt;/h2&gt;

&lt;p&gt;Here is the sequence I observed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Command 0xFA: Read: &lt;code class=&quot;highlighter-rouge&quot;&gt;01 ff 55 aa&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Command 0xF9: Write: &lt;code class=&quot;highlighter-rouge&quot;&gt;02 ff 00 00&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Command 0xF7: Read &lt;code class=&quot;highlighter-rouge&quot;&gt;04 01 00 00&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Command 0xF8: Write &lt;code class=&quot;highlighter-rouge&quot;&gt;04 0f 00 00&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Based on the similarities, I made the following assumptions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Command 0xFA: Read X (last 2 bytes are always read as 55 aa)&lt;/li&gt;
  &lt;li&gt;Command 0xF9: Write X (last 2 bytes ignored)&lt;/li&gt;
  &lt;li&gt;Command 0xF7: Read Y (last 2 bytes ignored?)&lt;/li&gt;
  &lt;li&gt;Command 0xF8: Write Y (last 2 bytes ignored?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don’t know what X and Y are but I know they probably control the LEDs. At this point I needed to experiment a bit to figure out what these commands really do.&lt;/p&gt;

&lt;h2 id=&quot;experiments&quot;&gt;Experiments&lt;/h2&gt;

&lt;p&gt;So I need to experiment with these SCSI commands. How can I send SCSI commands in Linux? An easy way is &lt;a href=&quot;http://sg.danny.cz/sg/sg3_utils.html&quot;&gt;sg3_utils&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My device is /dev/sdc.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;note&quot;&gt;
&lt;span&gt;
&lt;strong&gt;Note&lt;/strong&gt;: In general, it’s better to use /dev/disk/by-, especially with removable drives
&lt;/span&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Here’s a quick summary of commands for experimentation:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;function&lt;/th&gt;
      &lt;th&gt;opcode&lt;/th&gt;
      &lt;th&gt;command&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Read X&lt;/td&gt;
      &lt;td&gt;0xFA&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sg_raw -n -r 4 /dev/sdc fa 00 00 00 00 00 04 00 00 00&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Write X&lt;/td&gt;
      &lt;td&gt;0xF9&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo -e &quot;\x02\xff\x00\x00&quot;&lt;/code&gt; | &lt;code class=&quot;highlighter-rouge&quot;&gt;sg_raw -n -s 4 /dev/sdc f9 00 00 00 00 00 04 00 00 00&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Read Y&lt;/td&gt;
      &lt;td&gt;0xF7&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sg_raw -n -r 4 /dev/sdc f7 00 00 00 00 00 04 00 00 00&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Write Y&lt;/td&gt;
      &lt;td&gt;0xF8&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo -e &quot;\x04\x0f\x00\x00&quot;&lt;/code&gt; | &lt;code class=&quot;highlighter-rouge&quot;&gt;sg_raw -n -s 4 /dev/sdc f8 00 00 00 00 00 04 00 00 00&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I used these commands to verify that 0xFA/0xF9 read/write the same data and 0xF7/0xF8 read/write the same data. The last two bytes for both commands never seem to change, no matter what is written to them.&lt;/p&gt;

&lt;p&gt;So in the end, I drew the following conclusions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Commands 0xFA/0xF9 control the activity LED. Only the first byte seems to really matter (this isn’t quite the case as I found out later).&lt;/li&gt;
  &lt;li&gt;Commands 0xF7/0xF8 control the four status LEDs. Only the first two bytes are functional.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the activity LED, the values I have discovered are:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Data&lt;/th&gt;
      &lt;th&gt;Result&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;01&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Turn all LEDs off&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;02&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Turn on activity LED. Pulse on disk access, stay on solidly after. This also enables control of the status LEDs.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For the status LEDs (0xF7/0xF8), the first two bytes seem to have the following meaning:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First byte: Number of LEDs to enable (interpreted another way: number of bits of the second byte to actually pay attention to)&lt;/li&gt;
  &lt;li&gt;Second byte: Bitmask of the state of the status LEDs (0 - off, 1 - on)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, the following sequence of commands should turn all status LEDs of this drive (and similar drives) on:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;###### Turn on activity LED, enable status LEDs ######

echo -e &quot;\x02\xff\x00\x00&quot; | sg_raw -n -s 4 /dev/sdc f9 00 00 00 00 00 04 00 00 00

###### Turn all status LEDs on ######
echo -e &quot;\xff\xff\x00\x00&quot; | sg_raw -n -s 4 /dev/sdc f8 00 00 00 00 00 04 00 00 00
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is about all the information that I can get from the usb traffic alone. To confirm my assumptions I’ll need to do a bit of debugging.&lt;/p&gt;

&lt;h1 id=&quot;debugging-the-windows-software&quot;&gt;Debugging the Windows software&lt;/h1&gt;

&lt;p&gt;Now it’s time to start inspecting this Seagate Dashboard software to hopefully confirm my understanding of these SCSI commands.&lt;/p&gt;

&lt;h2 id=&quot;what-to-debug&quot;&gt;What to debug?&lt;/h2&gt;

&lt;p&gt;The first issue I had to figure out was what process should I debug or what executable should I disassemble?&lt;/p&gt;

&lt;p&gt;It stands to reason that sending raw SCSI commands to a drive is a restricted operation, not something a userland program can normally do.
This is, however, something a service can do.
Looking in services.msc I found “Seagate Dashboard Service” (&lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Program Files\Seagate\Seagate Dashboard\SeagateDashboardService.exe&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;debugging&quot;&gt;Debugging&lt;/h2&gt;

&lt;p&gt;Services are not launched in the normal way so it’s easiest to simply attach a debugger (with privileges) to the process.
I launched a debugger as an administrator and attached to the running SeagateDashboardService.exe process.
The first thing I noticed was a bunch of messages printed out like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I: 1/1/2014 1:35:22 AM (tid &amp;lt;no name&amp;gt;, 49) - RemoteServerImpl::DoRefreshCapacityLed() - Set new CapacityLedsOnCount=4
I: 1/1/2014 1:35:22 AM (tid &amp;lt;no name&amp;gt;, 50) - RemoteServerImpl::GetAllExternalDrives() - Returning all cached drives. count=1
I: 1/1/2014 1:35:22 AM (tid &amp;lt;no name&amp;gt;, 49) - RemoteServerImpl::SetSelectedDevice() - Set new device:GoFlex Desk - \\.\PHYSICALDRIVE1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So there is some debugging log that is being printed out which is nice.
Looking through the recognized functions I can see there is some debugging info present as some functions have names (such as &lt;code class=&quot;highlighter-rouge&quot;&gt;stxdevif_?SendCommand@CsendToService@@QAEHXZ&lt;/code&gt;). I can use something like &lt;a href=&quot;http://demangler.com&quot;&gt;demangler&lt;/a&gt; to see what kind of signature these functions have without analyzing them a bunch.&lt;/p&gt;

&lt;p&gt;There are a number of ways I can proceed from here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Search the process memory for the string LED or light&lt;/li&gt;
  &lt;li&gt;Search for function names containing LED or light (since some debugging info is present)&lt;/li&gt;
  &lt;li&gt;Set breakpoints on Windows API calls that can send SCSI commands to devices&lt;/li&gt;
  &lt;li&gt;Set breakpoints on all recognized functions and see what breakpoints are hit when pressing the “Turn Lights On/Off” button&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since I don’t have a clue what Windows APIs can be used to send SCSI commands, I’m going for the last option.
Specifically what I did was:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Place a breakpoint on all recognized functions&lt;/li&gt;
  &lt;li&gt;Run it and disable all breakpoints that are triggered&lt;/li&gt;
  &lt;li&gt;Once it runs without triggering any breakpoints, hit the “Turn Lights On” button&lt;/li&gt;
  &lt;li&gt;Step through functions until I see the lights actually come on&lt;/li&gt;
  &lt;li&gt;Look at the last function executed since it actually turned the light/lights on&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This led me to a function that was calling &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/windows/desktop/aa363216(v=vs.85).aspx&quot;&gt;DeviceIoControl&lt;/a&gt;.
Stepping over this function call shows that it is indeed sending SCSI commands to the drive.&lt;/p&gt;

&lt;p&gt;I won’t go into details due to the effort it would take, but it’s pretty simple to figure things out from here.&lt;/p&gt;

&lt;h1 id=&quot;conclusion-1&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;At this point I have a pretty clear picture on how to control the LEDs of this drive.
The final result is available on github:&lt;/p&gt;

&lt;h4 id=&quot;span-classicon-github-circledseagate-ledshttpsgithubcomdewyattseagate-ledsspan&quot;&gt;&lt;span class=&quot;icon-github-circled&quot;&gt;&lt;a href=&quot;https://github.com/dewyatt/seagate-leds&quot;&gt;seagate-leds&lt;/a&gt;&lt;/span&gt;&lt;/h4&gt;
</description>
        <pubDate>Fri, 28 Jun 2013 15:00:00 -0400</pubDate>
        <link>/2013/06/28/seagate-external-drive-leds-in-linux/</link>
        <guid isPermaLink="true">/2013/06/28/seagate-external-drive-leds-in-linux/</guid>
        
        
      </item>
    
  </channel>
</rss>
